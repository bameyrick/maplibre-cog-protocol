diff --git a/node_modules/dufour-peyton-intersection/src/range/merge.js b/node_modules/dufour-peyton-intersection/src/range/merge.js
index f996bfb..48fe85f 100644
--- a/node_modules/dufour-peyton-intersection/src/range/merge.js
+++ b/node_modules/dufour-peyton-intersection/src/range/merge.js
@@ -1,20 +1,31 @@
 // This function takes in an array of number pairs and combines where there's overlap
 module.exports = function mergeRanges(ranges) {
   const numberOfRanges = ranges.length;
+
   if (numberOfRanges > 0) {
-    const firstRange = ranges[0];
-    let previousEnd = firstRange[1];
-    const result = [firstRange];
+    // Sort ranges by start, and if equal, by end
+    ranges.sort((a, b) => a[0] - b[0] || a[1] - b[1]);
+
+    const result = [];
+    let [currentStart, currentEnd] = ranges[0];
+
     for (let i = 1; i < numberOfRanges; i++) {
-      const tempRange = ranges[i];
-      const [start, end] = tempRange;
-      if (start <= previousEnd) {
-        result[result.length - 1][1] = end;
+      const [start, end] = ranges[i];
+
+      // If the current range overlaps or is contiguous with the previous one
+      if (start <= currentEnd) {
+        currentEnd = Math.max(currentEnd, end); // Extend the range
       } else {
-        result.push(tempRange);
+        // Push the current range to the result and start a new one
+        result.push([currentStart, currentEnd]);
+        currentStart = start;
+        currentEnd = end;
       }
-      previousEnd = end;
     }
+
+    // Push the last range
+    result.push([currentStart, currentEnd]);
+
     return result;
   }
 };
